// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SmokePPD
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// This method opens SQL Server Managment Studio with 'FAREAST\v-rajis's credentials
        /// </summary>
        public void OpenSSMS()
        {
            #region Variable Declarations
            WinButton uISQLServer2014ManagemButton = this.UIRunningapplicationsWindow.UIRunningapplicationsToolBar.UISQLServer2014ManagemButton;
            WinMenuItem uIRunasdifferentuserMenuItem = this.UIItemWindow.UIContextMenu.UIRunasdifferentuserMenuItem;
            WinEdit uIUsernameEdit = this.UIWindowsSecurityWindow.UIUseanotheraccountListItem.UIUsernameEdit;
            WinEdit uIPasswordEdit = this.UIWindowsSecurityWindow.UIUseanotheraccountListItem.UIPasswordEdit;
            #endregion

            // Right-Click 'SQL Server 2014 Management Studio' button while pressing Shift
            Mouse.Click(uISQLServer2014ManagemButton, MouseButtons.Right, ModifierKeys.Shift, new Point(19, 32));

            // Click 'Run as different user' menu item
            Mouse.Click(uIRunasdifferentuserMenuItem, new Point(94, 7));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Type 'fareast\v-rajis' in 'User name' text box
            uIUsernameEdit.Text = this.OpenSSMSParams.UIUsernameEditText;

            // Type '{Tab}' in 'User name' text box
            Keyboard.SendKeys(uIUsernameEdit, this.OpenSSMSParams.UIUsernameEditSendKeys, ModifierKeys.None);

            // Type '********' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.OpenSSMSParams.UIPasswordEditSendKeys, true);

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// ConnectToCube - Use 'ConnectToCubeParams' to pass parameters into this method.
        /// </summary>
        public void ConnectToCube()
        {
            #region Variable Declarations
            WinComboBox uIServertypeComboBox = this.UIConnecttoServerWindow.UIComboBoxServerTypeWindow.UIServertypeComboBox;
            WinListItem uIAnalysisServicesListItem = this.UIItemWindow1.UIServertypeList.UIAnalysisServicesListItem;
            WinComboBox uIServernameComboBox = this.UIConnecttoServerCustom.UIServerInstanceWindow.UIServernameComboBox;
            WinButton uIConnectButton = this.UIConnecttoServerWindow.UIConnectWindow.UIConnectButton;
            #endregion

            // Click 'Server type:' combo box
            Mouse.Click(uIServertypeComboBox, new Point(74, 6));

            // Click 'Analysis Services' list item
            Mouse.Click(uIAnalysisServicesListItem, new Point(75, 5));

            // Select 'co1msftpppdsql1' in 'Server name:' combo box
            uIServernameComboBox.EditableItem = this.ConnectToCubeParams.UIServernameComboBoxEditableItem;

            // Click '&Connect' button
            Mouse.Click(uIConnectButton, new Point(47, 13));
        }
        
        /// <summary>
        /// OpenCubes - Use 'OpenCubesParams' to pass parameters into this method.
        /// </summary>
        public void OpenCubes()
        {
            #region Variable Declarations
            WinTree uIObjectExplorerHierarTree = this.UIMicrosoftSQLServerMaWindow.UIObjectExplorerPane.UIObjectExplorerTitleBar.UIItemPane.UIObjectExplorerClient.UIObjectExplorerHierarTree;
            WinTreeItem uIPPDMetricApprovalTreeItem = this.UIMicrosoftSQLServerMaWindow.UIObjectExplorerPane.UIObjectExplorerTitleBar.UIItemPane.UIPPDMetricApprovalTreeItem;
            WinMenuItem uIBrowseMenuItem = this.UIItemWindow2.UIDropDownMenu.UIBrowseMenuItem;
            WinToolTip uIDimTimeDimensionDimTToolTip = this.UIItemWindow11.UIDimTimeDimensionDimTToolTip;
            WinEdit uIRow0column0Edit = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow.UIColumn0Column.UIRow0column0Edit;
            WinEdit uIRow0column3Edit = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow.UIColumn3Column.UIRow0column3Edit;
            WinControl uIOpenDropDownButton = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIDropdownbuttonWindow.UIOpenDropDownButton;
            WinCheckBoxTreeItem uIAllCheckBoxTreeItem = this.UIDropdowncontrolholdeCustom.UIDropdowncontrolWindow.UIAllCheckBoxTreeItem;
            WinCheckBoxTreeItem uIFY15CheckBoxTreeItem = this.UIDropdowncontrolholdeWindow.UICustomComboBoxDropDoTree.UIAllCheckBoxTreeItem.UIFY15CheckBoxTreeItem;
            WinButton uIOKButton = this.UIDropdowncontrolholdeWindow.UIOKWindow.UIOKButton;
            WinToolTip uIDimApproverDimensionToolTip = this.UIItemWindow11.UIDimApproverDimensionToolTip;
            WinEdit uIRow1column0Edit = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow.UIColumn0Column.UIRow1column0Edit;
            WinTreeItem uIMeasuresTreeItem = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow1.UIMetaDataBrowserTree.UIPPDMetricApprovalTreeItem.UIMeasuresTreeItem;
            WinTreeItem uIApprovalStatusTreeItem = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow1.UIMetaDataBrowserTree.UIPPDMetricApprovalTreeItem.UIMeasuresTreeItem.UIApprovalStatusTreeItem;
            WinToolTip uIMeasuresAutoApprovalToolTip = this.UIItemWindow11.UIMeasuresAutoApprovalToolTip;
            WinTable uIGridForDesignTable = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow2.UIPanelQueryDesignStatClient.UIGridForDesignTable;
            WinTreeItem uIDimMetricTreeItem = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow1.UIMetaDataBrowserTree.UIPPDMetricApprovalTreeItem.UIDimMetricTreeItem;
            WinToolTip uIDimMetricMetricNameAToolTip = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIDimMetricMetricNameAToolTip;
            WinText uIRow2column0Text = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow3.UIColumn0Column.UIRow2column0Text;
            #endregion

            // Click 'Object Explorer Hierarchy' tree
            Mouse.Click(uIObjectExplorerHierarTree, new Point(31, 28));

            Playback.Wait(5000);

            // Click 'Object Explorer Hierarchy' tree
            Mouse.Click(uIObjectExplorerHierarTree, new Point(52, 79));

            Playback.Wait(5000);

            // Click 'Object Explorer Hierarchy' tree
            Mouse.Click(uIObjectExplorerHierarTree, new Point(69, 134));
            Playback.Wait(5000);

            // Right-Click 'PPD Metric Approval' tree item
            Mouse.Click(uIPPDMetricApprovalTreeItem, MouseButtons.Right, ModifierKeys.None, new Point(14, 11));

            Playback.Wait(2000);

            // Click 'Browse' menu item
            Mouse.Click(uIBrowseMenuItem, new Point(26, 3));

            Playback.Wait(7000);

            // Move '[DimTime]Dimension: DimTime' tooltip to 'row 0, column 0' text box
            uIRow0column0Edit.EnsureClickable(new Point(50, 11));
            Mouse.StartDragging(uIDimTimeDimensionDimTToolTip, new Point(15, 10));
            Mouse.StopDragging(uIRow0column0Edit, new Point(50, 11));

            // Click 'row 0, column 3' text box
            Mouse.Click(uIRow0column3Edit, new Point(129, 9));

            // Click 'Open' DropDownButton
            Mouse.Click(uIOpenDropDownButton, new Point(9, 9));

            // Expand 'All' check box
            uIAllCheckBoxTreeItem.Expanded = this.OpenCubesParams.UIAllCheckBoxTreeItemExpanded;

            // Click 'All' -> 'FY15' check box
            Mouse.Click(uIFY15CheckBoxTreeItem, new Point(-44, 4));

            // Click 'All' -> 'FY15' check box
            Mouse.Click(uIFY15CheckBoxTreeItem, new Point(-25, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 8));

            // Move '[DimApprover]Dimension: DimApprover' tooltip to 'row 1, column 0' text box
            uIRow1column0Edit.EnsureClickable(new Point(81, 7));
            Mouse.StartDragging(uIDimApproverDimensionToolTip, new Point(21, 14));
            Mouse.StopDragging(uIRow1column0Edit, new Point(81, 7));

            // Click 'PPD Metric Approval' -> 'Measures' tree item
            Mouse.Click(uIMeasuresTreeItem, new Point(-30, 8));

            // Expand 'PPD Metric Approval' -> 'Measures' -> 'Approval Status' tree item
            uIApprovalStatusTreeItem.Expanded = this.OpenCubesParams.UIApprovalStatusTreeItemExpanded;

            // Move '[Measures].[Auto Approval Count]Measure: Auto Appr...' tooltip to 'gridForDesign' table
            uIGridForDesignTable.EnsureClickable(new Point(78, 42));
            Mouse.StartDragging(uIMeasuresAutoApprovalToolTip, new Point(38, 12));
            Mouse.StopDragging(uIGridForDesignTable, new Point(78, 42));

            // Click 'PPD Metric Approval' -> 'DimMetric' tree item
            Mouse.Click(uIDimMetricTreeItem, new Point(-31, 7));

            // Move '[DimMetric].[Metric Name]Attribute Hierarchy: Metr...' tooltip to 'gridForDesign' table
            uIGridForDesignTable.EnsureClickable(new Point(195, 19));
            Mouse.StartDragging(uIDimMetricMetricNameAToolTip, new Point(28, 7));
            Mouse.StopDragging(uIGridForDesignTable, new Point(195, 19));

            // Click 'row 2, column 0' label
            Mouse.Click(uIRow2column0Text, new Point(33, 11));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIRow3column1Text = this.UIMicrosoftSQLServerMaWindow.UIItemTabList.UIPPDMetricApprovalBroTabPage.UIPPDMetricApprovalBroPane.UIItemPane.UIItemWindow3.UIColumn1Column.UIRow3column1Text;
            #endregion

            // Verify that the 'Exists' property of 'row 3, column 1' label equals 'True'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIRow3column1TextExists, uIRow3column1Text.Exists);
        }
        
        #region Properties
        public virtual OpenSSMSParams OpenSSMSParams
        {
            get
            {
                if ((this.mOpenSSMSParams == null))
                {
                    this.mOpenSSMSParams = new OpenSSMSParams();
                }
                return this.mOpenSSMSParams;
            }
        }
        
        public virtual ConnectToCubeParams ConnectToCubeParams
        {
            get
            {
                if ((this.mConnectToCubeParams == null))
                {
                    this.mConnectToCubeParams = new ConnectToCubeParams();
                }
                return this.mConnectToCubeParams;
            }
        }
        
        public virtual OpenCubesParams OpenCubesParams
        {
            get
            {
                if ((this.mOpenCubesParams == null))
                {
                    this.mOpenCubesParams = new OpenCubesParams();
                }
                return this.mOpenCubesParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIRunningapplicationsWindow UIRunningapplicationsWindow
        {
            get
            {
                if ((this.mUIRunningapplicationsWindow == null))
                {
                    this.mUIRunningapplicationsWindow = new UIRunningapplicationsWindow();
                }
                return this.mUIRunningapplicationsWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIWindowsSecurityWindow UIWindowsSecurityWindow
        {
            get
            {
                if ((this.mUIWindowsSecurityWindow == null))
                {
                    this.mUIWindowsSecurityWindow = new UIWindowsSecurityWindow();
                }
                return this.mUIWindowsSecurityWindow;
            }
        }
        
        public UIConnecttoServerWindow UIConnecttoServerWindow
        {
            get
            {
                if ((this.mUIConnecttoServerWindow == null))
                {
                    this.mUIConnecttoServerWindow = new UIConnecttoServerWindow();
                }
                return this.mUIConnecttoServerWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIConnecttoServerCustom UIConnecttoServerCustom
        {
            get
            {
                if ((this.mUIConnecttoServerCustom == null))
                {
                    this.mUIConnecttoServerCustom = new UIConnecttoServerCustom();
                }
                return this.mUIConnecttoServerCustom;
            }
        }
        
        public UIMicrosoftSQLServerMaWindow UIMicrosoftSQLServerMaWindow
        {
            get
            {
                if ((this.mUIMicrosoftSQLServerMaWindow == null))
                {
                    this.mUIMicrosoftSQLServerMaWindow = new UIMicrosoftSQLServerMaWindow();
                }
                return this.mUIMicrosoftSQLServerMaWindow;
            }
        }
        
        public UIItemWindow22 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow22();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111();
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIDropdowncontrolholdeCustom UIDropdowncontrolholdeCustom
        {
            get
            {
                if ((this.mUIDropdowncontrolholdeCustom == null))
                {
                    this.mUIDropdowncontrolholdeCustom = new UIDropdowncontrolholdeCustom();
                }
                return this.mUIDropdowncontrolholdeCustom;
            }
        }
        
        public UIDropdowncontrolholdeWindow UIDropdowncontrolholdeWindow
        {
            get
            {
                if ((this.mUIDropdowncontrolholdeWindow == null))
                {
                    this.mUIDropdowncontrolholdeWindow = new UIDropdowncontrolholdeWindow();
                }
                return this.mUIDropdowncontrolholdeWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenSSMSParams mOpenSSMSParams;
        
        private ConnectToCubeParams mConnectToCubeParams;
        
        private OpenCubesParams mOpenCubesParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIRunningapplicationsWindow mUIRunningapplicationsWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIWindowsSecurityWindow mUIWindowsSecurityWindow;
        
        private UIConnecttoServerWindow mUIConnecttoServerWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIConnecttoServerCustom mUIConnecttoServerCustom;
        
        private UIMicrosoftSQLServerMaWindow mUIMicrosoftSQLServerMaWindow;
        
        private UIItemWindow22 mUIItemWindow2;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIDropdowncontrolholdeCustom mUIDropdowncontrolholdeCustom;
        
        private UIDropdowncontrolholdeWindow mUIDropdowncontrolholdeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSSMS'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenSSMSParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'fareast\v-rajis' in 'User name' text box
        /// </summary>
        public string UIUsernameEditText = "fareast\\v-rajis";
        
        /// <summary>
        /// Type '{Tab}' in 'User name' text box
        /// </summary>
        public string UIUsernameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "R6irXgfYWQoRpQ7eIkjCihUNQO50cLGTy6P3pnTX+Wg=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ConnectToCube'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ConnectToCubeParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'co1msftpppdsql1' in 'Server name:' combo box
        /// </summary>
        public string UIServernameComboBoxEditableItem = "co1msftpppdsql1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenCubes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenCubesParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'All' check box
        /// </summary>
        public bool UIAllCheckBoxTreeItemExpanded = true;
        
        /// <summary>
        /// Expand 'PPD Metric Approval' -> 'Measures' -> 'Approval Status' tree item
        /// </summary>
        public bool UIApprovalStatusTreeItemExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'row 3, column 1' label equals 'True'
        /// </summary>
        public bool UIRow3column1TextExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIRunningapplicationsWindow : WinWindow
    {
        
        public UIRunningapplicationsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Running applications";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSTaskSwWClass";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public UIRunningapplicationsToolBar UIRunningapplicationsToolBar
        {
            get
            {
                if ((this.mUIRunningapplicationsToolBar == null))
                {
                    this.mUIRunningapplicationsToolBar = new UIRunningapplicationsToolBar(this);
                }
                return this.mUIRunningapplicationsToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIRunningapplicationsToolBar mUIRunningapplicationsToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIRunningapplicationsToolBar : WinToolBar
    {
        
        public UIRunningapplicationsToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Running applications";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public WinButton UISQLServer2014ManagemButton
        {
            get
            {
                if ((this.mUISQLServer2014ManagemButton == null))
                {
                    this.mUISQLServer2014ManagemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISQLServer2014ManagemButton.SearchProperties[WinButton.PropertyNames.Name] = "SQL Server 2014 Management Studio";
                    this.mUISQLServer2014ManagemButton.WindowTitles.Add("Running applications");
                    #endregion
                }
                return this.mUISQLServer2014ManagemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISQLServer2014ManagemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UIContextMenu UIContextMenu
        {
            get
            {
                if ((this.mUIContextMenu == null))
                {
                    this.mUIContextMenu = new UIContextMenu(this);
                }
                return this.mUIContextMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIContextMenu mUIContextMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIContextMenu : WinMenu
    {
        
        public UIContextMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Context";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIRunasdifferentuserMenuItem
        {
            get
            {
                if ((this.mUIRunasdifferentuserMenuItem == null))
                {
                    this.mUIRunasdifferentuserMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRunasdifferentuserMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Run as different user";
                    #endregion
                }
                return this.mUIRunasdifferentuserMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIRunasdifferentuserMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIWindowsSecurityWindow : WinWindow
    {
        
        public UIWindowsSecurityWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Windows Security";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Windows Security");
            #endregion
        }
        
        #region Properties
        public UIUseanotheraccountListItem UIUseanotheraccountListItem
        {
            get
            {
                if ((this.mUIUseanotheraccountListItem == null))
                {
                    this.mUIUseanotheraccountListItem = new UIUseanotheraccountListItem(this);
                }
                return this.mUIUseanotheraccountListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUseanotheraccountListItem mUIUseanotheraccountListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUseanotheraccountListItem : WinListItem
    {
        
        public UIUseanotheraccountListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Use another account";
            this.WindowTitles.Add("Windows Security");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "User name";
                    this.mUIUsernameEdit.WindowTitles.Add("Windows Security");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("Windows Security");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        
        private WinEdit mUIPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConnecttoServerWindow : WinWindow
    {
        
        public UIConnecttoServerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Connect to Server";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Connect to Server");
            #endregion
        }
        
        #region Properties
        public UIComboBoxServerTypeWindow UIComboBoxServerTypeWindow
        {
            get
            {
                if ((this.mUIComboBoxServerTypeWindow == null))
                {
                    this.mUIComboBoxServerTypeWindow = new UIComboBoxServerTypeWindow(this);
                }
                return this.mUIComboBoxServerTypeWindow;
            }
        }
        
        public UIConnectWindow UIConnectWindow
        {
            get
            {
                if ((this.mUIConnectWindow == null))
                {
                    this.mUIConnectWindow = new UIConnectWindow(this);
                }
                return this.mUIConnectWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIComboBoxServerTypeWindow mUIComboBoxServerTypeWindow;
        
        private UIConnectWindow mUIConnectWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIComboBoxServerTypeWindow : WinWindow
    {
        
        public UIComboBoxServerTypeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxServerType";
            this.WindowTitles.Add("Connect to Server");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIServertypeComboBox
        {
            get
            {
                if ((this.mUIServertypeComboBox == null))
                {
                    this.mUIServertypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIServertypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Server type:";
                    this.mUIServertypeComboBox.WindowTitles.Add("Connect to Server");
                    #endregion
                }
                return this.mUIServertypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIServertypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConnectWindow : WinWindow
    {
        
        public UIConnectWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "connect";
            this.WindowTitles.Add("Connect to Server");
            #endregion
        }
        
        #region Properties
        public WinButton UIConnectButton
        {
            get
            {
                if ((this.mUIConnectButton == null))
                {
                    this.mUIConnectButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConnectButton.SearchProperties[WinButton.PropertyNames.Name] = "Connect";
                    this.mUIConnectButton.WindowTitles.Add("Connect to Server");
                    #endregion
                }
                return this.mUIConnectButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIConnectButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIServertypeList UIServertypeList
        {
            get
            {
                if ((this.mUIServertypeList == null))
                {
                    this.mUIServertypeList = new UIServertypeList(this);
                }
                return this.mUIServertypeList;
            }
        }
        #endregion
        
        #region Fields
        private UIServertypeList mUIServertypeList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIServertypeList : WinList
    {
        
        public UIServertypeList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Server type:";
            #endregion
        }
        
        #region Properties
        public WinListItem UIAnalysisServicesListItem
        {
            get
            {
                if ((this.mUIAnalysisServicesListItem == null))
                {
                    this.mUIAnalysisServicesListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIAnalysisServicesListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Analysis Services";
                    #endregion
                }
                return this.mUIAnalysisServicesListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIAnalysisServicesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConnecttoServerCustom : WinCustom
    {
        
        public UIConnecttoServerCustom()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Connect to Server";
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Connect to Server");
            #endregion
        }
        
        #region Properties
        public UIServerInstanceWindow UIServerInstanceWindow
        {
            get
            {
                if ((this.mUIServerInstanceWindow == null))
                {
                    this.mUIServerInstanceWindow = new UIServerInstanceWindow(this);
                }
                return this.mUIServerInstanceWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIServerInstanceWindow mUIServerInstanceWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIServerInstanceWindow : WinWindow
    {
        
        public UIServerInstanceWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "serverInstance";
            this.WindowTitles.Add("Connect to Server");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIServernameComboBox
        {
            get
            {
                if ((this.mUIServernameComboBox == null))
                {
                    this.mUIServernameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIServernameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Server name:";
                    this.mUIServernameComboBox.WindowTitles.Add("Connect to Server");
                    #endregion
                }
                return this.mUIServernameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIServernameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMicrosoftSQLServerMaWindow : WinWindow
    {
        
        public UIMicrosoftSQLServerMaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft SQL Server Management Studio";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Microsoft SQL Server Management Studio");
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIObjectExplorerPane UIObjectExplorerPane
        {
            get
            {
                if ((this.mUIObjectExplorerPane == null))
                {
                    this.mUIObjectExplorerPane = new UIObjectExplorerPane(this);
                }
                return this.mUIObjectExplorerPane;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIObjectExplorerPane mUIObjectExplorerPane;
        
        private UIItemTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIObjectExplorerPane : WpfPane
    {
        
        public UIObjectExplorerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ViewPresenter";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ST:0:0:{d114938f-591c-46cf-a785-500a82d97410}";
            this.WindowTitles.Add("Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIObjectExplorerTitleBar UIObjectExplorerTitleBar
        {
            get
            {
                if ((this.mUIObjectExplorerTitleBar == null))
                {
                    this.mUIObjectExplorerTitleBar = new UIObjectExplorerTitleBar(this);
                }
                return this.mUIObjectExplorerTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIObjectExplorerTitleBar mUIObjectExplorerTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIObjectExplorerTitleBar : WpfTitleBar
    {
        
        public UIObjectExplorerTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemPane : WpfPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.HwndHost";
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIObjectExplorerClient UIObjectExplorerClient
        {
            get
            {
                if ((this.mUIObjectExplorerClient == null))
                {
                    this.mUIObjectExplorerClient = new UIObjectExplorerClient(this);
                }
                return this.mUIObjectExplorerClient;
            }
        }
        
        public WinTreeItem UIPPDMetricApprovalTreeItem
        {
            get
            {
                if ((this.mUIPPDMetricApprovalTreeItem == null))
                {
                    this.mUIPPDMetricApprovalTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIPPDMetricApprovalTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "PPD Metric Approval";
                    this.mUIPPDMetricApprovalTreeItem.SearchProperties["Value"] = "4";
                    this.mUIPPDMetricApprovalTreeItem.WindowTitles.Add("Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIPPDMetricApprovalTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIObjectExplorerClient mUIObjectExplorerClient;
        
        private WinTreeItem mUIPPDMetricApprovalTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIObjectExplorerClient : WinClient
    {
        
        public UIObjectExplorerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Object Explorer";
            this.WindowTitles.Add("Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinTree UIObjectExplorerHierarTree
        {
            get
            {
                if ((this.mUIObjectExplorerHierarTree == null))
                {
                    this.mUIObjectExplorerHierarTree = new WinTree(this);
                    #region Search Criteria
                    this.mUIObjectExplorerHierarTree.SearchProperties[WinTree.PropertyNames.Name] = "Object Explorer Hierarchy";
                    this.mUIObjectExplorerHierarTree.WindowTitles.Add("Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIObjectExplorerHierarTree;
            }
        }
        #endregion
        
        #region Fields
        private WinTree mUIObjectExplorerHierarTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIPPDMetricApprovalBroTabPage UIPPDMetricApprovalBroTabPage
        {
            get
            {
                if ((this.mUIPPDMetricApprovalBroTabPage == null))
                {
                    this.mUIPPDMetricApprovalBroTabPage = new UIPPDMetricApprovalBroTabPage(this);
                }
                return this.mUIPPDMetricApprovalBroTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIPPDMetricApprovalBroTabPage mUIPPDMetricApprovalBroTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPPDMetricApprovalBroTabPage : WpfTabPage
    {
        
        public UIPPDMetricApprovalBroTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "PPD Metric Approval [Browse]";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIPPDMetricApprovalBroPane UIPPDMetricApprovalBroPane
        {
            get
            {
                if ((this.mUIPPDMetricApprovalBroPane == null))
                {
                    this.mUIPPDMetricApprovalBroPane = new UIPPDMetricApprovalBroPane(this);
                }
                return this.mUIPPDMetricApprovalBroPane;
            }
        }
        #endregion
        
        #region Fields
        private UIPPDMetricApprovalBroPane mUIPPDMetricApprovalBroPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPPDMetricApprovalBroPane : WpfPane
    {
        
        public UIPPDMetricApprovalBroPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ViewPresenter";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "D:0:0:{Datasource=co1msftpppdsql1;Initial Catalog=PPDMetricApprovalService;Defaul" +
                "tQueryTimeout=0;}Cube=PPD Metric Approval;||{CC84AFBD-DA02-46F4-8623-9F07E5569ED" +
                "B}|Design";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIItemPane1 UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane1(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPane1 mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemPane1 : WpfPane
    {
        
        public UIItemPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.HwndHost";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDropdownbuttonWindow UIDropdownbuttonWindow
        {
            get
            {
                if ((this.mUIDropdownbuttonWindow == null))
                {
                    this.mUIDropdownbuttonWindow = new UIDropdownbuttonWindow(this);
                }
                return this.mUIDropdownbuttonWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public WinToolTip UIDimMetricMetricNameAToolTip
        {
            get
            {
                if ((this.mUIDimMetricMetricNameAToolTip == null))
                {
                    this.mUIDimMetricMetricNameAToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIDimMetricMetricNameAToolTip.SearchProperties[WinControl.PropertyNames.Name] = "[DimMetric].[Metric Name]Attribute Hierarchy: Metric Name";
                    #endregion
                }
                return this.mUIDimMetricMetricNameAToolTip;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIDropdownbuttonWindow mUIDropdownbuttonWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private WinToolTip mUIDimMetricMetricNameAToolTip;
        
        private UIItemWindow3 mUIItemWindow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "filterGridControl";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIColumn0Column UIColumn0Column
        {
            get
            {
                if ((this.mUIColumn0Column == null))
                {
                    this.mUIColumn0Column = new UIColumn0Column(this);
                }
                return this.mUIColumn0Column;
            }
        }
        
        public UIColumn3Column UIColumn3Column
        {
            get
            {
                if ((this.mUIColumn3Column == null))
                {
                    this.mUIColumn3Column = new UIColumn3Column(this);
                }
                return this.mUIColumn3Column;
            }
        }
        #endregion
        
        #region Fields
        private UIColumn0Column mUIColumn0Column;
        
        private UIColumn3Column mUIColumn3Column;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIColumn0Column : WinControl
    {
        
        public UIColumn0Column(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Column # 0";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Column";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UIRow0column0Edit
        {
            get
            {
                if ((this.mUIRow0column0Edit == null))
                {
                    this.mUIRow0column0Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIRow0column0Edit.SearchProperties[WinEdit.PropertyNames.Name] = "row 0, column 0";
                    this.mUIRow0column0Edit.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIRow0column0Edit;
            }
        }
        
        public WinEdit UIRow1column0Edit
        {
            get
            {
                if ((this.mUIRow1column0Edit == null))
                {
                    this.mUIRow1column0Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIRow1column0Edit.SearchProperties[WinEdit.PropertyNames.Name] = "row 1, column 0";
                    this.mUIRow1column0Edit.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIRow1column0Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIRow0column0Edit;
        
        private WinEdit mUIRow1column0Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIColumn3Column : WinControl
    {
        
        public UIColumn3Column(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Column # 3";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Column";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinEdit UIRow0column3Edit
        {
            get
            {
                if ((this.mUIRow0column3Edit == null))
                {
                    this.mUIRow0column3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIRow0column3Edit.SearchProperties[WinEdit.PropertyNames.Name] = "row 0, column 3";
                    this.mUIRow0column3Edit.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIRow0column3Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIRow0column3Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDropdownbuttonWindow : WinWindow
    {
        
        public UIDropdownbuttonWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "drop down button";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinControl UIOpenDropDownButton
        {
            get
            {
                if ((this.mUIOpenDropDownButton == null))
                {
                    this.mUIOpenDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIOpenDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "Open";
                    this.mUIOpenDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    this.mUIOpenDropDownButton.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIOpenDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIOpenDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "metaDataBrowser";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SysTreeView32", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIMetaDataBrowserTree UIMetaDataBrowserTree
        {
            get
            {
                if ((this.mUIMetaDataBrowserTree == null))
                {
                    this.mUIMetaDataBrowserTree = new UIMetaDataBrowserTree(this);
                }
                return this.mUIMetaDataBrowserTree;
            }
        }
        #endregion
        
        #region Fields
        private UIMetaDataBrowserTree mUIMetaDataBrowserTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMetaDataBrowserTree : WinTree
    {
        
        public UIMetaDataBrowserTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "metaDataBrowser";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIPPDMetricApprovalTreeItem UIPPDMetricApprovalTreeItem
        {
            get
            {
                if ((this.mUIPPDMetricApprovalTreeItem == null))
                {
                    this.mUIPPDMetricApprovalTreeItem = new UIPPDMetricApprovalTreeItem(this);
                }
                return this.mUIPPDMetricApprovalTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPPDMetricApprovalTreeItem mUIPPDMetricApprovalTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPPDMetricApprovalTreeItem : WinTreeItem
    {
        
        public UIPPDMetricApprovalTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "PPD Metric Approval";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIMeasuresTreeItem UIMeasuresTreeItem
        {
            get
            {
                if ((this.mUIMeasuresTreeItem == null))
                {
                    this.mUIMeasuresTreeItem = new UIMeasuresTreeItem(this);
                }
                return this.mUIMeasuresTreeItem;
            }
        }
        
        public WinTreeItem UIDimMetricTreeItem
        {
            get
            {
                if ((this.mUIDimMetricTreeItem == null))
                {
                    this.mUIDimMetricTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDimMetricTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "DimMetric";
                    this.mUIDimMetricTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDimMetricTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDimMetricTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDimMetricTreeItem.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIDimMetricTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMeasuresTreeItem mUIMeasuresTreeItem;
        
        private WinTreeItem mUIDimMetricTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMeasuresTreeItem : WinTreeItem
    {
        
        public UIMeasuresTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Measures";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIApprovalStatusTreeItem
        {
            get
            {
                if ((this.mUIApprovalStatusTreeItem == null))
                {
                    this.mUIApprovalStatusTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIApprovalStatusTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Approval Status";
                    this.mUIApprovalStatusTreeItem.SearchProperties["Value"] = "2";
                    this.mUIApprovalStatusTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIApprovalStatusTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIApprovalStatusTreeItem.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIApprovalStatusTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIApprovalStatusTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "panelQueryDesignState";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIPanelQueryDesignStatClient UIPanelQueryDesignStatClient
        {
            get
            {
                if ((this.mUIPanelQueryDesignStatClient == null))
                {
                    this.mUIPanelQueryDesignStatClient = new UIPanelQueryDesignStatClient(this);
                }
                return this.mUIPanelQueryDesignStatClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelQueryDesignStatClient mUIPanelQueryDesignStatClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPanelQueryDesignStatClient : WinClient
    {
        
        public UIPanelQueryDesignStatClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinTable UIGridForDesignTable
        {
            get
            {
                if ((this.mUIGridForDesignTable == null))
                {
                    this.mUIGridForDesignTable = new WinTable(this);
                    #region Search Criteria
                    this.mUIGridForDesignTable.SearchProperties[WinTable.PropertyNames.Name] = "gridForDesign";
                    this.mUIGridForDesignTable.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIGridForDesignTable;
            }
        }
        #endregion
        
        #region Fields
        private WinTable mUIGridForDesignTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "gridForDesign";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public UIColumn0Column1 UIColumn0Column
        {
            get
            {
                if ((this.mUIColumn0Column == null))
                {
                    this.mUIColumn0Column = new UIColumn0Column1(this);
                }
                return this.mUIColumn0Column;
            }
        }
        
        public UIColumn1Column UIColumn1Column
        {
            get
            {
                if ((this.mUIColumn1Column == null))
                {
                    this.mUIColumn1Column = new UIColumn1Column(this);
                }
                return this.mUIColumn1Column;
            }
        }
        #endregion
        
        #region Fields
        private UIColumn0Column1 mUIColumn0Column;
        
        private UIColumn1Column mUIColumn1Column;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIColumn0Column1 : WinControl
    {
        
        public UIColumn0Column1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Column # 0";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Column";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinText UIRow2column0Text
        {
            get
            {
                if ((this.mUIRow2column0Text == null))
                {
                    this.mUIRow2column0Text = new WinText(this);
                    #region Search Criteria
                    this.mUIRow2column0Text.SearchProperties[WinText.PropertyNames.Name] = "row 2, column 0";
                    this.mUIRow2column0Text.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIRow2column0Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIRow2column0Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIColumn1Column : WinControl
    {
        
        public UIColumn1Column(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Column # 1";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Column";
            this.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
            #endregion
        }
        
        #region Properties
        public WinText UIRow3column1Text
        {
            get
            {
                if ((this.mUIRow3column1Text == null))
                {
                    this.mUIRow3column1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIRow3column1Text.SearchProperties[WinText.PropertyNames.Name] = "row 3, column 1";
                    this.mUIRow3column1Text.WindowTitles.Add("PPD Metric Approval [Browse] - Microsoft SQL Server Management Studio");
                    #endregion
                }
                return this.mUIRow3column1Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIRow3column1Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow22 : WinWindow
    {
        
        public UIItemWindow22()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDropDownMenu UIDropDownMenu
        {
            get
            {
                if ((this.mUIDropDownMenu == null))
                {
                    this.mUIDropDownMenu = new UIDropDownMenu(this);
                }
                return this.mUIDropDownMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIDropDownMenu mUIDropDownMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDropDownMenu : WinMenu
    {
        
        public UIDropDownMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "DropDown";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIBrowseMenuItem
        {
            get
            {
                if ((this.mUIBrowseMenuItem == null))
                {
                    this.mUIBrowseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIBrowseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Browse";
                    #endregion
                }
                return this.mUIBrowseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIBrowseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "[DimTime]Dimension: DimTime";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.tooltips_class32", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinToolTip UIDimTimeDimensionDimTToolTip
        {
            get
            {
                if ((this.mUIDimTimeDimensionDimTToolTip == null))
                {
                    this.mUIDimTimeDimensionDimTToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIDimTimeDimensionDimTToolTip.SearchProperties[WinControl.PropertyNames.Name] = "[DimTime]Dimension: DimTime";
                    #endregion
                }
                return this.mUIDimTimeDimensionDimTToolTip;
            }
        }
        
        public WinToolTip UIDimApproverDimensionToolTip
        {
            get
            {
                if ((this.mUIDimApproverDimensionToolTip == null))
                {
                    this.mUIDimApproverDimensionToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIDimApproverDimensionToolTip.SearchProperties[WinControl.PropertyNames.Name] = "[DimApprover]Dimension: DimApprover";
                    #endregion
                }
                return this.mUIDimApproverDimensionToolTip;
            }
        }
        
        public WinToolTip UIMeasuresAutoApprovalToolTip
        {
            get
            {
                if ((this.mUIMeasuresAutoApprovalToolTip == null))
                {
                    this.mUIMeasuresAutoApprovalToolTip = new WinToolTip(this);
                    #region Search Criteria
                    this.mUIMeasuresAutoApprovalToolTip.SearchProperties[WinControl.PropertyNames.Name] = "[Measures].[Auto Approval Count]Measure: Auto Approval Count";
                    #endregion
                }
                return this.mUIMeasuresAutoApprovalToolTip;
            }
        }
        #endregion
        
        #region Fields
        private WinToolTip mUIDimTimeDimensionDimTToolTip;
        
        private WinToolTip mUIDimApproverDimensionToolTip;
        
        private WinToolTip mUIMeasuresAutoApprovalToolTip;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDropdowncontrolholdeCustom : WinCustom
    {
        
        public UIDropdowncontrolholdeCustom()
        {
            #region Search Criteria
            this.SearchProperties["AccessibleName"] = "Custom ComboBox Drop Down";
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDropdowncontrolWindow UIDropdowncontrolWindow
        {
            get
            {
                if ((this.mUIDropdowncontrolWindow == null))
                {
                    this.mUIDropdowncontrolWindow = new UIDropdowncontrolWindow(this);
                }
                return this.mUIDropdowncontrolWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDropdowncontrolWindow mUIDropdowncontrolWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDropdowncontrolWindow : WinWindow
    {
        
        public UIDropdowncontrolWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "drop down control";
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIAllCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIAllCheckBoxTreeItem == null))
                {
                    this.mUIAllCheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIAllCheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "All";
                    this.mUIAllCheckBoxTreeItem.SearchProperties["Value"] = "0";
                    #endregion
                }
                return this.mUIAllCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIAllCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDropdowncontrolholdeWindow : WinWindow
    {
        
        public UIDropdowncontrolholdeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Custom ComboBox Drop Down";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UICustomComboBoxDropDoTree UICustomComboBoxDropDoTree
        {
            get
            {
                if ((this.mUICustomComboBoxDropDoTree == null))
                {
                    this.mUICustomComboBoxDropDoTree = new UICustomComboBoxDropDoTree(this);
                }
                return this.mUICustomComboBoxDropDoTree;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICustomComboBoxDropDoTree mUICustomComboBoxDropDoTree;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomComboBoxDropDoTree : WinTree
    {
        
        public UICustomComboBoxDropDoTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Custom ComboBox Drop Down Control";
            #endregion
        }
        
        #region Properties
        public UIAllCheckBoxTreeItem UIAllCheckBoxTreeItem
        {
            get
            {
                if ((this.mUIAllCheckBoxTreeItem == null))
                {
                    this.mUIAllCheckBoxTreeItem = new UIAllCheckBoxTreeItem(this);
                }
                return this.mUIAllCheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAllCheckBoxTreeItem mUIAllCheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAllCheckBoxTreeItem : WinCheckBoxTreeItem
    {
        
        public UIAllCheckBoxTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "All";
            this.SearchProperties["Value"] = "0";
            #endregion
        }
        
        #region Properties
        public WinCheckBoxTreeItem UIFY15CheckBoxTreeItem
        {
            get
            {
                if ((this.mUIFY15CheckBoxTreeItem == null))
                {
                    this.mUIFY15CheckBoxTreeItem = new WinCheckBoxTreeItem(this);
                    #region Search Criteria
                    this.mUIFY15CheckBoxTreeItem.SearchProperties[WinCheckBoxTreeItem.PropertyNames.Name] = "FY15";
                    this.mUIFY15CheckBoxTreeItem.SearchProperties["Value"] = "1";
                    this.mUIFY15CheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIFY15CheckBoxTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    #endregion
                }
                return this.mUIFY15CheckBoxTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBoxTreeItem mUIFY15CheckBoxTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ok button";
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
